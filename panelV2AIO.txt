#!/usr/bin/env bash
# all-in-one-pterosetup.sh — Install Pterodactyl Panel + Wings (latest, fast, robust)
set -euo pipefail

### ====== KONFIG CEPAT (bisa di-override via ENV) ============================
: "${APP_URL:=http://localhost}"      # URL Panel (WAJIB benar, contoh: https://panel.example.com)
: "${TZ:=Asia/Jakarta}"               # Zona waktu
: "${PANEL_HTTP_PORT:=80}"            # Port HTTP Panel di host
: "${EXPOSE_WINGS_443:=true}"        # true/false — publish 443 untuk Wings
: "${PANEL_IMAGE:=ghcr.io/pterodactyl/panel:latest}"
: "${WINGS_IMAGE:=ghcr.io/pterodactyl/wings:latest}"
# Subnet kandidat untuk network 'pterodactyl0' (dipakai pertama yang kosong)
CANDIDATE_SUBNETS=("10.15.0.0/16" "10.200.0.0/16" "172.31.0.0/16" "10.77.0.0/16")
### ===========================================================================

# --- pilih perintah compose ---
if docker compose version >/dev/null 2>&1; then
  DC="docker compose"
elif command -v docker-compose >/dev/null 2>&1; then
  DC="docker-compose"
else
  echo "❌ Docker Compose tidak ditemukan. Instal Docker terlebih dahulu." >&2
  exit 1
fi

# --- pembangkit password random ---
rand() {
  if command -v openssl >/dev/null 2>&1; then
    openssl rand -base64 24 | tr -dc 'A-Za-z0-9' | head -c 20
  else
    tr -dc 'A-Za-z0-9' </dev/urandom | head -c 20
  fi
}
DB_USER_PASS="${DB_USER_PASS:-$(rand)}"
DB_ROOT_PASS="${DB_ROOT_PASS:-$(rand)}"

echo "🔧 Konfigurasi:"
echo "  APP_URL         : ${APP_URL}"
echo "  TZ              : ${TZ}"
echo "  PANEL_HTTP_PORT : ${PANEL_HTTP_PORT}"
echo "  PANEL_IMAGE     : ${PANEL_IMAGE}"
echo "  WINGS_IMAGE     : ${WINGS_IMAGE}"
echo "  EXPOSE_WINGS_443: ${EXPOSE_WINGS_443}"
echo

### ====== PANEL ===============================================================
echo "📦 Menginstal Pterodactyl Panel…"
mkdir -p pterodactyl/panel
cd pterodactyl/panel

cat > docker-compose.yml <<YML
services:
  database:
    image: mariadb:10.11
    restart: always
    command:
      - --default-authentication-plugin=mysql_native_password
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    environment:
      MYSQL_DATABASE: panel
      MYSQL_USER: pterodactyl
      MYSQL_PASSWORD: ${DB_USER_PASS}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASS}
      TZ: ${TZ}
    volumes:
      - ./data/mysql:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-p${DB_ROOT_PASS}"]
      interval: 10s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7-alpine
    restart: always
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10

  panel:
    image: ${PANEL_IMAGE}
    restart: always
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "${PANEL_HTTP_PORT}:80"
    environment:
      TZ: ${TZ}
      APP_ENV: production
      APP_ENVIRONMENT_ONLY: false
      APP_URL: ${APP_URL}
      APP_TIMEZONE: ${TZ}
      TRUSTED_PROXIES: "*"

      DB_HOST: database
      DB_PORT: 3306
      DB_DATABASE: panel
      DB_USERNAME: pterodactyl
      DB_PASSWORD: ${DB_USER_PASS}

      CACHE_DRIVER: redis
      QUEUE_CONNECTION: redis
      SESSION_DRIVER: redis
      REDIS_HOST: redis
      REDIS_PORT: 6379

      MAIL_MAILER: log
      MAIL_FROM: "noreply@example.com"
    volumes:
      - ./data/var:/app/var
      - ./data/logs:/app/storage/logs
YML

$DC up -d

echo "⏳ Init Panel (key & migrate)…"
$DC exec panel php artisan key:generate --force
$DC exec panel php artisan migrate --force || true

echo "👤 Buat admin Panel (interaktif)…"
$DC exec panel php artisan p:user:make || true

echo "✅ Panel up. Akses: ${APP_URL}"
echo "   DB user pass : ${DB_USER_PASS}"
echo "   DB root pass : ${DB_ROOT_PASS}"
echo

### ====== WINGS: siapkan network pterodactyl0 (anti-overlap) ==================
echo "🌐 Menyiapkan Docker network 'pterodactyl0' (anti-overlap)…"
# Hapus jika ada network lama tanpa bridge name yang cocok
docker network rm pterodactyl0 >/dev/null 2>&1 || true

created=false
for SUB in "${CANDIDATE_SUBNETS[@]}"; do
  echo -n "  → mencoba subnet ${SUB}… "
  if docker network create \
      --driver bridge \
      --subnet "${SUB}" \
      --gateway "$(echo "${SUB}" | sed 's#.0/.*#.1#')" \
      -o com.docker.network.bridge.name=pterodactyl0 \
      pterodactyl0 >/dev/null 2>&1; then
    echo "OK"
    created=true
    break
  else
    echo "gagal (overlap?)"
  fi
done

if [[ "${created}" != true ]]; then
  echo "❌ Gagal membuat network 'pterodactyl0' tanpa overlap. Silakan pilih subnet lain di skrip (CANDIDATE_SUBNETS)." >&2
  exit 1
fi

docker network inspect pterodactyl0 | grep -E '"Name"|"Subnet"|"com.docker.network.bridge.name"' || true
echo

### ====== WINGS ===============================================================
echo "🪽 Menginstal Pterodactyl Wings…"
cd ../
mkdir -p wings/config
cd wings

cat > docker-compose.yml <<'YML'
services:
  wings:
    image: __WINGS_IMAGE__
    container_name: wings
    restart: always
    ports:
      - "8080:8080"     # API/HTTP Wings
      - "2022:2022"     # SFTP
__WINGS_443__
    tty: true
    environment:
      TZ: "__TZ__"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers/:/var/lib/docker/containers/
      - ./config:/etc/pterodactyl/
      - /var/lib/pterodactyl/:/var/lib/pterodactyl/
      - /var/log/pterodactyl/:/var/log/pterodactyl/
      - /tmp/pterodactyl/:/tmp/pterodactyl/
      - /etc/ssl/certs:/etc/ssl/certs:ro
YML

# Replace placeholder
sed -i "s#__WINGS_IMAGE__#${WINGS_IMAGE}#g" docker-compose.yml
sed -i "s#__TZ__#${TZ}#g" docker-compose.yml
if [[ "${EXPOSE_WINGS_443}" == "true" ]]; then
  sed -i 's#__WINGS_443__#      - "443:443"#' docker-compose.yml
else
  sed -i 's#__WINGS_443__##' docker-compose.yml
fi

CONF="config/config.yml"
if [[ ! -s "$CONF" ]]; then
  echo "📄 Sekarang isi konfigurasi Wings."
  echo "   Buka Panel → Admin → Nodes → (pilih node) → Configuration → Show/Generate"
  echo "   SALIN **SELURUH YAML** ke file berikut (paste lalu tekan Ctrl+D):"
  echo "   $(pwd)/$CONF"
  mkdir -p config
  # input langsung tanpa editor
  cat > "$CONF"
  echo
fi

# Pastikan config memuat network yang cocok (tidak wajib, tapi disarankan)
if ! grep -q 'docker:' "$CONF"; then
  cat >> "$CONF" <<'EOF'

docker:
  network:
    name: pterodactyl0
    interface: pterodactyl0
EOF
else
  # tambahkan hint jika belum ada 'network' block
  if ! grep -q 'network:' "$CONF"; then
    sed -i '/^docker:/a\  network:\n    name: pterodactyl0\n    interface: pterodactyl0' "$CONF"
  fi
fi

echo "🚀 Menjalankan Wings…"
$DC up -d
sleep 2
$DC ps

echo
echo "✅ Wings start. Jika Node di Panel belum 'Connected':"
echo "   - Cek/benarkan 'remote:' (harus sama persis dengan APP_URL Panel)."
echo "   - Jika di belakang proxy (Caddy/CF Tunnel/Codespaces), set di Panel→Node:"
echo "     FQDN=domain publik Wings, Use SSL=ON, Daemon Port=443, Behind Proxy=ON."
echo "   - Lihat log:  cd $(pwd) && $DC logs -f wings"
echo
echo "Selesai. 🎉"
